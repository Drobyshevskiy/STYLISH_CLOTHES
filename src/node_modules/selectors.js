import * as R from 'ramda'

export const getclotheById = (state, id) => R.prop(id, state.clothes)
export const getActiveCategoryId = ownProps => R.path(['match', 'params', 'id'], ownProps)
export const getActiveSizeId = ownProps => R.path(['match', 'params', 'id'], ownProps)

export const getclothes = (state, ownProps) => {
  const activeCategoryId = getActiveCategoryId(ownProps)
  const activeSizeId = getActiveSizeId(ownProps)
  const applySearch = item => R.contains(
      state.clothesPage.search,
      R.prop('name', item)
  )
  const applyCategory = item => R.equals(
      activeCategoryId,
      R.prop('categoryId', item)
  )
  const applySize = item => R.equals(
      activeSizeId,
      R.prop('sizeId', item)
  )
  const clothes = R.compose(
      R.filter(applySearch),
      R.when(R.always(activeCategoryId<40), R.filter(applyCategory)),
      R.when(R.always(activeSizeId>40), R.filter(applySize)),
      R.map(id => getclotheById(state, id))
  )(state.clothesPage.ids)
  return clothes
}

/*
export const getclothes = (state, ownProps) => {
  const activeCategoryId = getActiveCategoryId(ownProps)
  const applySearch = item => R.contains(
    state.clothesPage.search,
    R.prop('name', item)
  )
  const applyCategory = item => R.equals(
      activeCategoryId,
      R.prop('categoryId', item)
  )
  const clothes = R.compose(
    R.filter(applySearch),
    R.when(R.always(activeCategoryId), R.filter(applyCategory)),
    R.map(id => getclotheById(state, id))
  )(state.clothesPage.ids)
  return clothes
}

export const getclothe = (state, ownProps) => {
  const activeSizeId = getActiveSizeId(ownProps)
  const applySearch = item => R.contains(
      state.clothesPage.search,
      R.prop('name', item)
  )
  const applySize = item => R.equals(
      activeSizeId,
      R.prop('sizeId', item)
  )
  const clothes = R.compose(
      R.filter(applySearch),
      R.when(R.always(activeSizeId), R.filter(applySize)),
      R.map(id => getclotheById(state, id))
  )(state.clothesPage.ids)
  return clothes
}
*/
export const getRenderedclothesLength = state => R.length(state.clothesPage.ids)

export const getTotalBasketCount = state => R.length(state.basket)

export const getTotalBasketPrice = state => {
  const totalPrice = R.compose(
    R.sum,
    R.pluck('price'),
    R.map(id => getclotheById(state, id))
  )(state.basket)

  return totalPrice
}

export const getCategories = state => R.values(state.categories)

export const getSize = state => R.values(state.size)

export const getBasketclothesWithCount = state => {
  const clotheCount = id => R.compose(
    R.length,
    R.filter(basketId => R.equals(id, basketId))
  )(state.basket)
  const clotheWithCount = clothe => R.assoc('count', clotheCount(clothe.id), clothe)
  const uniqueIds = R.uniq(state.basket)
  const clothes = R.compose(
    R.map(clotheWithCount),
    R.map(id => getclotheById(state, id))
  )(uniqueIds)

  return clothes
}






/*

*/